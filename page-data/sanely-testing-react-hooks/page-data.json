{"componentChunkName":"component---src-templates-blog-post-js","path":"/sanely-testing-react-hooks/","result":{"data":{"site":{"siteMetadata":{"title":"davecooper.dev"}},"markdownRemark":{"id":"2128df2b-807b-5493-8448-c0d7e672c9db","excerpt":"Hi there ðŸ‘‹ Letâ€™s talk about how to test React hooks. Suppose we have a React application (with TypeScript) that uses Redux for state management. Suppose insideâ€¦","html":"<p>Hi there ðŸ‘‹ Letâ€™s talk about how to test React hooks.</p>\n<p>Suppose we have a React application (with TypeScript) that uses Redux for state management.</p>\n<p>Suppose inside said application you have a hook that does the following:</p>\n<ol>\n<li>Dispatch an action which ends up make an API call to get a <code class=\"language-text\">thing</code> and put it into state.</li>\n<li>Returns that <code class=\"language-text\">thing</code> from state.</li>\n</ol>\n<p>It might even look like this:</p>\n<p><strong>useThing.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useSelector<span class=\"token punctuation\">,</span> useDispatch <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getThingStart <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./redux/actions'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useThing</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> dispatch <span class=\"token operator\">=</span> <span class=\"token function\">useDispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">getThingStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">useSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>thing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> useThing <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We can then use this hook inside a component:</p>\n<p><strong>MyComponent.tsx</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useThing <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./useThing'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MyComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> thing <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useThing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>thing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Loading...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">This is your thing: </span><span class=\"token punctuation\">{</span>thing<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We might even have many components that use this hook.</p>\n<p>We probably want to test that this hook behaviour works as expected.</p>\n<p>How do we do this? What would good tests for this look like?</p>\n<p>The most common way I see custom hooks being tested is by testing a component that uses the custom hook. Iâ€™m really not a fan of this as component can have so many things going on inside them that could effect the internal state of a component. This effects the confidence we can have in the test which isnâ€™t really what weâ€™re aiming for.</p>\n<p>Since we canâ€™t call hooks outside of components (with some exceptions), I also see people wrapping their hooks with dummy components. Iâ€™m not sure if this is better or worse than the previously mentioned strategy, but it still doesnâ€™t make me happy. There are also cases of when things donâ€™t go according to plan within the component that probably arenâ€™t being catered for in a simple dummy component.</p>\n<p>Why donâ€™t we try treat testing hooks as closely as we can to unit testing a regular JavaScript function? After all, hooks are just functionsâ€¦</p>\n<p>Fortunately, we can write tests for our hooks in this style thanks to <a href=\"https://github.com/testing-library/react-hooks-testing-library\">react-hook-testing-library</a>. It provides a <code class=\"language-text\">renderHook</code> function which lets us pass in our hook and execute it. Under the hood, <code class=\"language-text\">renderHook</code> is using the hook within a dummy component, but the difference here is:</p>\n<ul>\n<li>To the test-writer, it appears that we are just executing a function with a callback - not an uncommon thing to do.</li>\n<li>\n<p>The dummy component is very defensively programmed and can handle pretty much any error/exception case gracefully (itâ€™s actually somewhat complicated to do)</p>\n<ul>\n<li>I took a look through the source code for this function and Iâ€™m really glad it wasnâ€™t me that had to write itâ€¦</li>\n</ul>\n</li>\n</ul>\n<p>Letâ€™s see what tests for this hook might look like (using Jest):</p>\n<p><strong>useThing.spec.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> renderHook <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@testing-library/react-hooks'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getThingStart <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./redux/actions'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useThing <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./useThing'</span><span class=\"token punctuation\">;</span>\n\njest<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  useSelector<span class=\"token operator\">:</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  useDispatch<span class=\"token operator\">:</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> mockUseSelector <span class=\"token operator\">=</span> useSelector <span class=\"token keyword\">as</span> jest<span class=\"token punctuation\">.</span>Mock<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mockUseDispatch <span class=\"token operator\">=</span> useDispatch <span class=\"token keyword\">as</span> jest<span class=\"token punctuation\">.</span>Mock<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mockDispatch <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'useThing hook'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'calls dispatch and retrieves our thing'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    mockUseDispatch<span class=\"token punctuation\">.</span><span class=\"token function\">mockImplementation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> mockDispatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mockUseSelector<span class=\"token punctuation\">.</span><span class=\"token function\">mockImplementation</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> thing<span class=\"token operator\">:</span> <span class=\"token string\">'this is our thing'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// This is our mocked state.</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> result <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">renderHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">useThing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Call our hook.</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is our thing'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Make sure hook returns our slice of state.</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mockDispatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token function\">getThingsStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Make sure the right action was dispatched.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Lovely.</p>\n<p>To break down what the test is doingâ€¦</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">jest<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-redux'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  useSelector<span class=\"token operator\">:</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  useDispatch<span class=\"token operator\">:</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> mockUseSelector <span class=\"token operator\">=</span> useSelector <span class=\"token keyword\">as</span> jest<span class=\"token punctuation\">.</span>Mock<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mockUseDispatch <span class=\"token operator\">=</span> useDispatch <span class=\"token keyword\">as</span> jest<span class=\"token punctuation\">.</span>Mock<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mockDispatch <span class=\"token operator\">=</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>These lines set up our mocked behaviour for <code class=\"language-text\">useSelector</code>, <code class=\"language-text\">useDispatch</code> and <code class=\"language-text\">dispatch</code>. We need to be able to mock implementations for <code class=\"language-text\">useSelector</code> and <code class=\"language-text\">useDispatch</code> and we need to spy on what <code class=\"language-text\">dispatch</code> was called with.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">mockUseDispatch<span class=\"token punctuation\">.</span><span class=\"token function\">mockImplementation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> mockDispatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmockUseSelector<span class=\"token punctuation\">.</span><span class=\"token function\">mockImplementation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> thing<span class=\"token operator\">:</span> <span class=\"token string\">'this is our thing'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>These lines tell the <code class=\"language-text\">useDispatch</code> hook to return our mocked <code class=\"language-text\">dispatch</code> function and for the <code class=\"language-text\">useSelector</code> hook to call a callback containing a mocked state object.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> result <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">renderHook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">useThing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This line calls <code class=\"language-text\">renderHook</code> and tells it to run our <code class=\"language-text\">useThing</code> hook. <code class=\"language-text\">renderHook</code> returns a <code class=\"language-text\">result</code> object.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'this is our thing'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mockDispatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token function\">getThingsStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Finally, we make our assertions! We first assert that the <code class=\"language-text\">useThing</code> hook returned the right value. Next we make sure that <code class=\"language-text\">dispatch</code> was called with the right action to dispatch.</p>\n<h2>Final thoughts</h2>\n<p>We now have a hook that weâ€™ve concisely and confidently tested ðŸŽ‰</p>\n<p>Iâ€™m really happy with this pattern of testing hooks and I think that people should consider treating their hook tests more like their unit tests.</p>\n<p>Iâ€™d love to hear any thoughts about this, so please feel free to reach out to me about it :)</p>\n<p>-Dave</p>","timeToRead":4,"frontmatter":{"title":"Sanely testing React hooks","date":"January 15, 2020","description":"Discussion around sane patterns for testing React hooks"}}},"pageContext":{"slug":"/sanely-testing-react-hooks/","previous":{"fields":{"slug":"/my-angular-connect-talk/"},"frontmatter":{"title":"My AngularConnect 2019 talk"}},"next":{"fields":{"slug":"/mocking-the-window-object-in-unit-tests/"},"frontmatter":{"title":"Mocking the window object in unit tests"}}}}}