{"componentChunkName":"component---src-templates-blog-post-js","path":"/mocking-the-window-object-in-unit-tests/","result":{"data":{"site":{"siteMetadata":{"title":"davecooper.dev"}},"markdownRemark":{"id":"b8979804-bb6c-5bad-93f4-84b8f3ece1b6","excerpt":"Recently, I implemented some functionality that leveraged the browser’s performance API to help with measuring an initial page render time. The code looked…","html":"<p>Recently, I implemented some functionality that leveraged the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance\">browser’s performance API</a> to help with measuring an initial page render time.</p>\n<p>The code looked something similar to this:</p>\n<h3>performance.ts</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">measureInitialPageLoad</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    window<span class=\"token punctuation\">.</span>performance\n      <span class=\"token punctuation\">.</span><span class=\"token function\">getEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> el<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'MY_APP_INITIAL_PAGE_RENDERED'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span>performance<span class=\"token punctuation\">.</span><span class=\"token function\">measure</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MY_APP_INITIAL_PAGE_RENDERED'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The code above does the following:</p>\n<ul>\n<li>Defines a function called <code class=\"language-text\">measureInitialPageLoad</code>.</li>\n<li>Calls <code class=\"language-text\">window.performance.getEntries()</code> to get an array of <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry\">PerformanceEntry objects</a> made by the browser.</li>\n<li>\n<p>Filters the list of <code class=\"language-text\">PerformanceEntry</code>s to see if any of them are called <code class=\"language-text\">MY_APP_INITIAL_PAGE_RENDERED</code>.</p>\n<ul>\n<li>We have prepended <code class=\"language-text\">MY_APP</code> to this <code class=\"language-text\">PerformanceEntry</code> to help ensure that nothing else is generating a <code class=\"language-text\">PerformanceEntry</code> called <code class=\"language-text\">INITIAL_PAGE_RENDERED</code>.</li>\n</ul>\n</li>\n<li>If we haven’t measured this before (i.e. if the filter returns an array of length 0), then we call <code class=\"language-text\">window.performance.measure()</code> to create a named <code class=\"language-text\">PerformanceEntry</code>.</li>\n</ul>\n<p>Pretty straightforward and fairly uninteresting, right?</p>\n<p>Well, it starts to get interesting right around the time you need to write some unit tests for this piece of code. We’ve all been there - writing unit tests for code that leverages the <code class=\"language-text\">window</code> object but a lot of the time you don’t stop and think about what the <code class=\"language-text\">window</code> object <em>actually is</em> and why it can sometimes feel a bit odd writing unit tests around it.</p>\n<p>To unit test this function, we need to reliably manipulate the <code class=\"language-text\">window.performance</code> object to do two things:</p>\n<ol>\n<li>Return a desired array of <code class=\"language-text\">PerformanceEntry</code> objects when <code class=\"language-text\">window.performance.getEntries()</code> is called.</li>\n<li>Track whether of not <code class=\"language-text\">window.performance.measure</code> has been called.</li>\n</ol>\n<p>One approach might be to try do something like:</p>\n<p><em>Note: tests are written using Jest</em></p>\n<h3>performance.spec.ts</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> measureInitialPageLoad <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./performance'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'performance'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Calls measure when we have not already measured the initial page rendering'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span>performance <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      getEntries<span class=\"token operator\">:</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockReturnValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      measure<span class=\"token operator\">:</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">measureInitialPageLoad</span><span class=\"token punctuation\">(</span><span class=\"token string\">'INITIAL_PAGE_RENDERED_TEST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>performance<span class=\"token punctuation\">.</span>measure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is something I commonly see to try hack around the window object in unit tests and for <em>some things</em> it does work. However, it turns out the <code class=\"language-text\">window.perfomance</code> object is <strong>read only</strong>. Uh oh - this won’t work!</p>\n<p>You’ll be left with an error that looks like:</p>\n<blockquote>\n<p>Cannot assign to ‘performance’ because it is a read-only property.</p>\n</blockquote>\n<p>Not to mention, it’s harder to clean up your mocks inbetween tests if you set things directly on the <code class=\"language-text\">window</code> object like this.</p>\n<p>Admittedly, this was the first thing I tried and left me feeling a bit baffled. I searched around for some examples online of other people trying to mock read-only <code class=\"language-text\">window</code> objects and the closest thing I could come across was something like this:</p>\n<h3>performance.spec.ts</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> measureInitialPageLoad <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./performance'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'performance'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Calls measure when we have not already measured the initial page rendering'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">delete</span> <span class=\"token punctuation\">(</span>window <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>performance<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> performance <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      measure<span class=\"token operator\">:</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      getEntries<span class=\"token operator\">:</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> <span class=\"token string\">'performance'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      configurable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      enumerable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      value<span class=\"token operator\">:</span> performance<span class=\"token punctuation\">,</span>\n      writable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">measureInitialPageLoad</span><span class=\"token punctuation\">(</span><span class=\"token string\">'INITIAL_PAGE_RENDERED_TEST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>performance<span class=\"token punctuation\">.</span>measure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Basically, we delete <code class=\"language-text\">performance</code> off the window object… but to do that, we have to cast as <code class=\"language-text\">any</code> because in the Jest testing environment, we’re actually referring to the NodeJS <code class=\"language-text\">window</code> which doesn’t have <code class=\"language-text\">performance</code> defined on it. We then add a writeable <code class=\"language-text\">performance</code> object to <code class=\"language-text\">window</code> with our Jest mocks and away we go.</p>\n<p>This works… but it’s not so great:</p>\n<ul>\n<li>\n<p>It deletes something from the <code class=\"language-text\">window</code> object.</p>\n<ul>\n<li>That sounds/feels a bit weird, doesn’t it?</li>\n</ul>\n</li>\n<li>\n<p>We have to define a new property on <code class=\"language-text\">window</code> with a writeable <code class=\"language-text\">performance</code> object.</p>\n<ul>\n<li>How many times have you had to do something like this before? I’m guessing the answer to this is zero.</li>\n</ul>\n</li>\n</ul>\n<p>Ideally, what we want is a <code class=\"language-text\">window</code> that behaves normally but allows us to mock objects on it in the <em>same way</em>, no matter if the object was originally read-only or not. For example, the pattern used to mock something on the <code class=\"language-text\">window.location</code> object is exactly the same as the pattern used to mock something on the <code class=\"language-text\">window.performance</code> object.</p>\n<p>🎉 It turns out we can do that 🎉</p>\n<p>To do this, we need to:</p>\n<ol>\n<li>Export a copy of the <code class=\"language-text\">window</code> object from a module.</li>\n<li>Use that copy in our code.</li>\n<li>Once the two things above have been done, we can then mock the <code class=\"language-text\">window</code> object properly in our tests.</li>\n</ol>\n<p>Let’s do it!</p>\n<hr>\n<p>First, let’s export a copy of the <code class=\"language-text\">window</code> object.</p>\n<p>Unfortunately, neither TypeScript nor Jest allow us to do:</p>\n<h3>window.ts</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> window <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So we have to create a copy and export that instead:</p>\n<h3>window.ts</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> windowCopy <span class=\"token operator\">=</span> window<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> windowCopy <span class=\"token keyword\">as</span> window <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Okay, first step done. Next, let’s change our references to <code class=\"language-text\">window</code> in our code to use the copy we are now exporting:</p>\n<h3>performance.ts</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> window <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./window'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">measureInitialPageLoad</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n    window<span class=\"token punctuation\">.</span>performance\n      <span class=\"token punctuation\">.</span><span class=\"token function\">getEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> el<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'MY_APP_INITIAL_PAGE_RENDERED'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span>performance<span class=\"token punctuation\">.</span><span class=\"token function\">measure</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MY_APP_INITIAL_PAGE_RENDERED'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>That was easy - adding the import was the only thing we needed to do!</p>\n<p>Lastly, let’s mock the window object in our test (I’ve also included the other test that I wrote for this particular function):</p>\n<h3>performance.spec.ts</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> measureInitialPageLoad <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./performance'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> window <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./window'</span><span class=\"token punctuation\">;</span>\n\njest<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./window'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  window<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    performance<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      measure<span class=\"token operator\">:</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      getEntries<span class=\"token operator\">:</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'performance'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Calls measure when we have not already measured the initial page rendering'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>performance<span class=\"token punctuation\">.</span>getEntries <span class=\"token keyword\">as</span> jest<span class=\"token punctuation\">.</span>Mock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockReturnValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">measureInitialPageLoad</span><span class=\"token punctuation\">(</span><span class=\"token string\">'INITIAL_PAGE_RENDERED_TEST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>performance<span class=\"token punctuation\">.</span>measure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Does not call measure when we already have measured the initial page render'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>performance<span class=\"token punctuation\">.</span>getEntries <span class=\"token keyword\">as</span> jest<span class=\"token punctuation\">.</span>Mock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mockReturnValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'INITIAL_PAGE_RENDERED_TEST'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">measureInitialPageLoad</span><span class=\"token punctuation\">(</span><span class=\"token string\">'INITIAL_PAGE_RENDERED_TEST'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>performance<span class=\"token punctuation\">.</span>measure<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And there we have it - a pattern that can be used to mock anything on the window object, regardless if it is read-only or not. The only thing to remember here is that when you want to mock a return value, you still need to cast the function you’re mocking to <code class=\"language-text\">jest.Mock</code> as TypeScript isn’t quite smart enough to work out that we are actually dealing with a mock at compile-time.</p>\n<hr>\n<h2>Concluding thoughts</h2>\n<p>Personally, I really like this pattern of working with <code class=\"language-text\">window</code> in unit tests because it provides a consistent pattern to mock anything we need regardless of what it is we’re trying to mock. The <code class=\"language-text\">window</code> object is a funny one because sometimes it’s not always clear how to work with it in a testing environment.</p>\n<p>I’d love to hear everyone’s thoughts on this and to share how they deal with mocking <code class=\"language-text\">window</code> in their testing environments!</p>\n<p>-Dave</p>","timeToRead":6,"frontmatter":{"title":"Mocking the window object in unit tests","date":"March 20, 2020","description":"How to mock the browser window object for testing purposes"}}},"pageContext":{"slug":"/mocking-the-window-object-in-unit-tests/","previous":{"fields":{"slug":"/sanely-testing-react-hooks/"},"frontmatter":{"title":"Sanely testing React hooks"}},"next":{"fields":{"slug":"/new-blog/"},"frontmatter":{"title":"My blog: now with Gatsby!"}}}}}