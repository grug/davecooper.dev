{"componentChunkName":"component---src-templates-blog-post-js","path":"/a-nice-express-testing-experience/","result":{"data":{"site":{"siteMetadata":{"title":"davecooper.dev"}},"markdownRemark":{"id":"c2b46a8d-b610-5ede-b566-5e1d9159a4ca","excerpt":"Oh hello there - this is my first post of the new decade! üéâ This one is a short story of relieving some testing pain. As an early declaration - I know I‚Äôm late‚Ä¶","html":"<p>Oh hello there - this is my first post of the new decade! üéâ</p>\n<p>This one is a short story of relieving some testing pain. As an early declaration - I know I‚Äôm late to the party with the solution to the problem I came up with, but I still see lots and lots of code being written in the painful ways I describe so I think it‚Äôs worth talking about.</p>\n<p>I recently had to spin up a Node (TypeScript)/Express service from scratch.</p>\n<p>After scaffolding my project with the usual things, it was time to write an endpoint. I figured for monitoring purposes, I‚Äôll want a ping/pong endpoint.</p>\n<p>Here‚Äôs what the application looks like so far in our journey:</p>\n<p><strong>app.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> pingHandler <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./pingHandler'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/ping'</span><span class=\"token punctuation\">,</span> pingHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Dave's cool API server started</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>pingHandler.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Response<span class=\"token punctuation\">,</span> Request <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">OK</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'http-status-codes'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">pingHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token operator\">:</span> Request<span class=\"token punctuation\">,</span> res<span class=\"token operator\">:</span> Response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token constant\">OK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'PONG'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nothing fancy <em>at all</em>.</p>\n<p>Let‚Äôs try and test the <code class=\"language-text\">/ping</code> endpoint. It only does one thing and we have a single handler function that does anything interesting.</p>\n<p>It‚Äôs effectively one line of code that is pretty innocuous, if we‚Äôre being honest.</p>\n<p>This was the point that I realised that I see so much code to test Express endpoints that looks like the following:</p>\n<p><strong>pingHandler.spec.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Request <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> pingHandler <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./pingHandler'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">pingHandler</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">responds with 'PONG' and 200 when the endpoint it is hit</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Request<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> res<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      end<span class=\"token operator\">:</span> jest<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">pingHandler</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is <strong>so painful</strong>. There are so many things I find wrong with code like this:</p>\n<ul>\n<li>There is a line that has two castings in it</li>\n<li>Two things are typed as <code class=\"language-text\">any</code></li>\n<li>It doesn‚Äôt actually check the response or status code</li>\n<li>It‚Äôs hard to read</li>\n</ul>\n<p>Tests like this try to act like unit tests - but testing endpoints like this shouldn‚Äôt really be carried out like traditional unit tests. Obviously if this handler function were calling out to other functions we‚Äôve written, then those would require unit testing. However, the sort of test we‚Äôre really looking for here sits halfway between what I‚Äôd describe as a unit test and an integration test.</p>\n<p>What can we do? Instead of trying to ‚Äúunit test‚Äù a function like this, why not use a more appropriate tool for the job (<em>something something square peg, round hole‚Ä¶</em>)?</p>\n<p>Hello <a href=\"https://github.com/visionmedia/supertest\">supertest</a> üëã</p>\n<p>Supertest allows us to pass our app to it, make requests and make assertions on the output in a clear and concise manner.</p>\n<p>I could go on about how the API works, but they have good docs for that - it‚Äôs probably easier to just show you what the test now looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> request <span class=\"token keyword\">from</span> <span class=\"token string\">'supertest'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> app <span class=\"token keyword\">from</span> <span class=\"token string\">'./app'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">pingHandler</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">responds with 'PONG' and 200 when the endpoint it is hit</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">done</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">request</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/ping'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'PONG'</span><span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Look at that! Much easier to read/understand what‚Äôs going on and we‚Äôre <em>actually testing the things that matter</em>. I really think this is the way to go when compared to the previous style of test I showed you earlier.</p>\n<p>Anyways, that‚Äôs pretty much it for now. It looks very obvious when written out like this but I see it from developers all the time so I‚Äôm hoping this helps some people see that there are other ways of testing endpoints in their Express applications.</p>\n<p>Hit me up if you want to chat about it üòÄ</p>\n<p>-Dave</p>","timeToRead":3,"frontmatter":{"title":"A nice Express testing experience","date":"January 05, 2020","description":"I discuss a nice way to code test Express endpoints"}}},"pageContext":{"slug":"/a-nice-express-testing-experience/","previous":{"fields":{"slug":"/is-moving-to-typescript-hard/"},"frontmatter":{"title":"Is moving to TypeScript in 2019 hard?"}},"next":{"fields":{"slug":"/my-angular-connect-talk/"},"frontmatter":{"title":"My AngularConnect 2019 talk"}}}}}