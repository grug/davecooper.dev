{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript-3-7/","result":{"data":{"site":{"siteMetadata":{"title":"davecooper.dev"}},"markdownRemark":{"id":"8efb73c1-9530-5d17-a986-aafc3068419c","excerpt":"What a great day - it’s not raining in London and there’s a new version of TypeScript out - 🎉 - let’s talk about some of the neat stuff in it! Note: most of…","html":"<p>What a great day - it’s not raining in London <em>and</em> there’s a new version of TypeScript out - 🎉 - let’s talk about some of the neat stuff in it!</p>\n<p><em>Note: most of the knowledge in this post can be acquired by digesting the changelog for this release. I just thought I’d give my own summary as it may be easier to consume.</em></p>\n<p><a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html\">TypeScript 3.7</a> (I suggest you give this a quick flick through) has given us a super rad set of features/changes. I thought I’d pick a few of the things that I think are going to improve the quality of life for everyone and give a breakdown with code examples to illustrate their usefulness.</p>\n<p><em>Spoiler: a class of annoying boilerplate is removed</em></p>\n<hr>\n<h3>Optional Chaining</h3>\n<p>Let’s look at some code that we see frequently</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>foo <span class=\"token operator\">&amp;&amp;</span> foo<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">&amp;&amp;</span> foo<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">.</span>baz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">This sucks!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We all have written code like this and we all hate it… fortunately, <em>optional chaining</em> eliminates this (be careful, though - more on this in a second!). We can now do this:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>foo<span class=\"token operator\">?.</span>bar<span class=\"token operator\">?.</span>baz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Now we're cooking with gas!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I can hear you breathing a sigh of relief from here… not having to write <em><strong>that</strong></em> sort of code again is a rather cathartic feeling.</p>\n<p>We can also use optional chaining for array access and calling functions.</p>\n<p><strong>Array access:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> someArray<span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Result: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Will be the value of the array element if someArray exists, else undefined.</span></code></pre></div>\n<p><strong>Calling functions (code lifted from release notes):</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">makeRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> log<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">msg<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  log<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Request started at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  log<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Request finished at at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toISOString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There are some gotchas with this, though…</p>\n<ol>\n<li>Optional chaining doesn’t short circuit, so if you have a line of code such as:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> foo<span class=\"token operator\">?.</span>bar <span class=\"token operator\">/</span> <span class=\"token function\">someFunctionCall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It doesn’t stop <code class=\"language-text\">someFunctionCall</code> from being invoked, meaning you may try divide <code class=\"language-text\">undefined</code> by whatever <code class=\"language-text\">someFunctionCall</code> returns which isn’t ideal. This is why it’s recommended you have <code class=\"language-text\">strictNullChecks</code> enabled.</p>\n<ol start=\"2\">\n<li>The two following lines may look equivalent, but are not:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">foo <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>and</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">await</span> foo<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The first snippet will short circuit and not call <code class=\"language-text\">foo()</code> if it isn’t defined, whereas the second snippet will wrap the undefined case into a promise and return that.</p>\n<ol start=\"3\">\n<li>When matching regular expressions, <code class=\"language-text\">null</code> is returned, not <code class=\"language-text\">undefined</code>, which makes the two following lines non-equivalent:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> match <span class=\"token operator\">=</span> someString<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/someRegex/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> match <span class=\"token operator\">&amp;&amp;</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>and</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> match <span class=\"token operator\">=</span> someString<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/someRegex/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> match<span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>To rewrite the first snippet using optional chaining, you’d also need to use the nullish coalescing operator (see the next section for a full explanation of this operator - for now you can think of it as a ‘fallback’ operator):</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> match <span class=\"token operator\">=</span> someString<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/someRegex/</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> match<span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">??</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h3>Nullish Coalescing</h3>\n<p>The nullish coalescing operator (or fallback operate, as I like to say in my head when reading code) is another sweet addition to TypeScript 3.7. In essence, it allows us to say “use this value if it is present, else do something else.</p>\n<p>Without the fallback operator, to achieve this sort of behaviour, we’d have to write something like (code shamelessly stolen again from the 3.7 release notes):</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> foo <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> foo <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> foo <span class=\"token operator\">:</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We can now rewrite the above as:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> foo <span class=\"token operator\">??</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>🙏 Sweet merciful lord that is so much nicer 🙏</p>\n<p>This operator also now allows us to avoid subtle bugs, too. Before, a common thing I would see in code would be:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> y <span class=\"token operator\">||</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Which works for <em>most</em> cases but falls over at the fact that if <code class=\"language-text\">y</code> is <code class=\"language-text\">0</code> or <code class=\"language-text\">&#39;&#39;</code>, the fallback value will be used, despite <code class=\"language-text\">0</code> or <code class=\"language-text\">&#39;&#39;</code> potentially being valid values. We can now safely rewrite it as:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> y <span class=\"token operator\">??</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Hooray!</p>\n<hr>\n<h3>Uncalled Function Checks</h3>\n<p>The last neat thing I wanted to pick out of this release are uncalled function checks. Suppose you have the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">isAdmin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">doSomethingDangerous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user<span class=\"token operator\">:</span> User</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>isAdmin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doSomethingDangerous</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We have a bug: <code class=\"language-text\">user.isAdmin</code> is always true because the function is defined, therefore we will always invoked <code class=\"language-text\">doSomethingDangerous()</code>!</p>\n<p>Uh oh 🙀</p>\n<p>Fortunately, this will now error in 3.7:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">// error<span class=\"token operator\">!</span> This condition will always <span class=\"token builtin class-name\">return</span> <span class=\"token boolean\">true</span> since the <span class=\"token keyword\">function</span> is always defined.\n//  Did you mean to call it instead?</code></pre></div>\n<hr>\n<p>All of the features and improvements in TypeScript 3.7 are pretty neato burrito 🌯</p>\n<p>I’m super excited to use them all at length and you should be too!</p>\n<p>-Dave</p>","timeToRead":4,"frontmatter":{"title":"Cool TypeScript 3.7 things","date":"November 06, 2019","description":"Some cool TypeScript 3.7 things with code examples"}}},"pageContext":{"slug":"/typescript-3-7/","previous":{"fields":{"slug":"/speaking-at-angular-connect/"},"frontmatter":{"title":"Speaking at AngularConnect 2019"}},"next":{"fields":{"slug":"/is-moving-to-typescript-hard/"},"frontmatter":{"title":"Is moving to TypeScript in 2019 hard?"}}}}}