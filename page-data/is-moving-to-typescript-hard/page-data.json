{"componentChunkName":"component---src-templates-blog-post-js","path":"/is-moving-to-typescript-hard/","result":{"data":{"site":{"siteMetadata":{"title":"davecooper.dev"}},"markdownRemark":{"id":"72197840-13c8-584a-9fae-66824ac34ecf","excerpt":"I recently had a conversation with some friends that went something like this: Friend A: I’m working on a JavaScript project. I’ll probably migrate it to…","html":"<p>I recently had a conversation with some friends that went something like this:</p>\n<blockquote>\n<p><strong>Friend A</strong>: I’m working on a JavaScript project. I’ll probably migrate it to TypeScript at some point.\n<strong>Me</strong>: You should just do it now - it takes no time to do and you can immediately begin harnessing the features of TypeScript while not impacting your existing codebase.\n<strong>Friend B</strong>: Is it really easy? Last time I tried to do this I spent hours trying to understand a bunch of documentation and new tooling</p>\n</blockquote>\n<p>I’ve been using TypeScript for years now, so it’s quite hard to unlearn a lot of things I know about how to get it set up and strategies I’d take to migrate an existing JavaScript codebase to TypeScript, but I’ll try be methodical about this…</p>\n<p>Assumptions we’re making about the person wanting to make the switch:</p>\n<ul>\n<li>They have a pretty good knowledge of JavaScript.</li>\n<li>They have heard of TypeScript and possibly have a small idea of its capabilities (but mostly just the “TypeScript is a superset of JavaScript” and “it provides types!” parts).</li>\n<li>They’re able to use Google.</li>\n</ul>\n<p>Now, you could just take a look at the <a href=\"https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html\">migrating from JavaScript guide</a> but this can be a bit overwhelming if you don’t know what’s in front of you.</p>\n<p>Let’s say we want to get on Dave’s TypeScript HypeWagon™ and have the following project:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span>\n├── build\n├── package.json\n└── src\n    ├── components\n    │   └── foo.js\n    └── util\n        └── bar.js</code></pre></div>\n<p>We have a:</p>\n<ul>\n<li><code class=\"language-text\">build</code> directory. This is where our built code lives.</li>\n<li><code class=\"language-text\">package.json</code> file. This is where our dependencies are managed and where our build scripts live.</li>\n<li><code class=\"language-text\">foo.js</code> file inside a component directory.</li>\n<li><code class=\"language-text\">bar.js</code> file inside a util directory.</li>\n</ul>\n<p>Cool - super contrived - let’s see where this leads us…</p>\n<hr>\n<p>What do we need to do in order to start cooking with TypeScript?</p>\n<h3>Add TypeScript to your project</h3>\n<p>In order to use TypeScript, we obviously need to add it to our project first. If you’re using <a href=\"https://www.npmjs.com/\">NPM</a>, run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i --save-dev typescript</code></pre></div>\n<p>If you’re using <a href=\"https://yarnpkg.com/lang/en/\">Yarn</a>, run</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> --dev typescript</code></pre></div>\n<p><em>Done. Next!</em></p>\n<hr>\n<h3>Create a config file</h3>\n<p>Not a bad start. Let’s create a <code class=\"language-text\">tsconfig.json</code> file in the root of our project and slap in the following config:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"allowJs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es6\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./src/**/*\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This tells the TypeScript compiler a few things:</p>\n<ul>\n<li>Look inside the <code class=\"language-text\">src/</code> directory for TypeScript files (the <code class=\"language-text\">include</code> setting).</li>\n<li>Allow JavaScript files as well (the <code class=\"language-text\">allowJs</code> setting).</li>\n<li>Spit output files to the <code class=\"language-text\">build/</code> directory (the <code class=\"language-text\">outDir</code> setting).</li>\n<li>Emit ES6 code (the <code class=\"language-text\">target</code> setting).</li>\n</ul>\n<p>For existing codebases, this is a quick way to dip your toes into the TypeScript waters. However, it is a very relaxed config that isn’t super TypeScript’y. We’ll talk about what this means in a bit.</p>\n<hr>\n<h3>Build our code</h3>\n<p>Okay, we’ve installed TypeScript and defined a config that shouldn’t slow us down in getting up and running with TypeScript.</p>\n<p>Now we need to build our code using the TypeScript compiler. Let’s add a <code class=\"language-text\">build</code> script in <code class=\"language-text\">package.json</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>That’s all. The TypeScript compiler will know to look in the root of your project for <code class=\"language-text\">tsconfig.json</code> (it will complain at you if it can’t find it) and begin doing your bidding. You’ll notice that your <code class=\"language-text\">build/</code> directory output mimics your <code class=\"language-text\">src/</code> directory structure. There will be more on this in a bit.</p>\n<p>🎉 At this stage, you’re all up and running - you can write and compile TypeScript 🎉</p>\n<hr>\n<h3>Writing TypeScript</h3>\n<p>Now that we can compile TypeScript in our projects, let’s go ahead and rename our files to use the <code class=\"language-text\">.ts</code> (if the original file was using JS) or <code class=\"language-text\">.tsx</code> (if the original file was using JSX).</p>\n<hr>\n<h3>Okay, what next</h3>\n<p>We’re not exactly done yet…</p>\n<p>The contrived example provided so far doesn’t account for (at least) a few things:</p>\n<ol>\n<li>How do I hook this all up to appropriate tooling?</li>\n<li>How do I get more strict with my codebase?</li>\n</ol>\n<p>Once both of these things are addressed, you’re basically 95% of the way there.</p>\n<p>So… let’s address them.</p>\n<hr>\n<h3>Tooling</h3>\n<p>There are many bundling tools out there to help manage TypeScript projects, but for this article we’ll stick with the most popular one - <a href=\"https://webpack.js.org/\">Webpack</a>.</p>\n<p>I could go on all day about the capabilities of Webpack, but for the scope of this article, let’s just focus on what we need to do for TypeScript.</p>\n<p>Let’s install a few things and I’ll explain them along the way:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> -D ts-loader webpack webpack-cli</code></pre></div>\n<p>All we really need to tell Webpack is a few things:</p>\n<ol>\n<li>What the input(s) to our source are.</li>\n<li>Where our output(s) are.</li>\n<li>What sort of files we want Webpack to handle (i.e. TypeScript files).</li>\n<li>What to do when we encounter a TypeScript file.</li>\n</ol>\n<p>In order to do this, we’ll need to create a webpack config file (<code class=\"language-text\">webpack.config.js</code>) in the root of our project:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  entry<span class=\"token operator\">:</span> <span class=\"token string\">'./src/components/foo.ts'</span><span class=\"token punctuation\">,</span>\n  output<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    path<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'dist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    filename<span class=\"token operator\">:</span> <span class=\"token string\">'bundle.js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    extensions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'.js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.jsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.ts'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.tsx'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  module<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    rules<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> test<span class=\"token operator\">:</span> <span class=\"token regex\">/\\.tsx?$/</span><span class=\"token punctuation\">,</span> exclude<span class=\"token operator\">:</span> <span class=\"token regex\">/node_modules/</span><span class=\"token punctuation\">,</span> loader<span class=\"token operator\">:</span> <span class=\"token string\">'ts-loader'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here we can observe the following things:</p>\n<ol>\n<li>The entry point into our application is <code class=\"language-text\">./src/components/foo.ts</code>.</li>\n<li>We are outputting our bundle to <code class=\"language-text\">./dist/bundle.js</code>.</li>\n<li>We want Webpack to handle <code class=\"language-text\">.js</code>, <code class=\"language-text\">.jsx</code>, <code class=\"language-text\">.ts</code> and <code class=\"language-text\">.tsx</code> files.</li>\n<li>We have a rule that when we encounter a <code class=\"language-text\">.ts</code> or <code class=\"language-text\">.tsx</code> file we run <code class=\"language-text\">ts-loader</code> on them.</li>\n</ol>\n<p>📀 *<em>Record scratch</em>* 📀</p>\n<p>What on Earth is <code class=\"language-text\">ts-loader</code>?!</p>\n<p>A loader is a preprocessor that runs when a rule is matched. In this case, we run the <code class=\"language-text\">ts-loader</code> to convert our TypeScript to browser-friendly code.</p>\n<p>There are <em>loads</em> of loaders that do <em>loads</em> of things, and there are loaders that do the same things as other loaders (for instance, <code class=\"language-text\">ts-loader</code> and <code class=\"language-text\">babel-loader</code> can do pretty similar things) so it can feel overwhelming at times.</p>\n<p>Okay. Now we have Webpack configured to do what we want it to, we need to run it. Fortunately it’s just a modification to our build script in <code class=\"language-text\">package.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc &amp;&amp; webpack\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This calls <code class=\"language-text\">tsc</code> to compile our code and spit out any errors that may have occurred, and then calls <code class=\"language-text\">webpack</code> to bundle our code into a single output file (this means we only need to serve one JavaScript file - there are advantages and disadvantages to this, but that is out of scope for this post).</p>\n<hr>\n<h3>Scaling up</h3>\n<p>This post has covered how to start using TypeScript in an existing project but what do we do from here?</p>\n<p>It’s not considered good practice to keep the really loose rules that we have in our <code class=\"language-text\">.tsconfig</code> file as it won’t catch as many potential errors that we’d like to at compile-time.</p>\n<p>However, if you turn on all the stricter rules (you can read about all the compiler options <a href=\"https://www.typescriptlang.org/docs/handbook/compiler-options.html\">here</a>) you’ll quickly find yourself working with a codebase with a lot of errors/warnings.</p>\n<p>If you have the time (and patience) you can go from 0-100, turn on <code class=\"language-text\">strict</code> mode and work through any errors/warnings. Otherwise you can try turning on one of the rules that <code class=\"language-text\">strict</code> mode applies at a time and working through it that way.</p>\n<p>One other way you can go about this is to be more lenient on older files in a codebase and enforce that all new files introduced into a codebase pass <code class=\"language-text\">strict</code> compiles.</p>\n<h3>Final thoughts</h3>\n<p>I guess the question here I was trying to answer is:</p>\n<blockquote>\n<p>Is it easy to migrate an existing JavaScript codebase to TypeScript</p>\n</blockquote>\n<p>I think the answer is: <em>it depends, but <strong>mostly yes</strong></em>.</p>\n<p>It’s really about striking a balance between time, effort and sanity.</p>\n<p>I still recommend that people make the plunge as you can start slow and forgiving and eventually ramp up to a fully-fledged TypeScript environment in your projects.</p>\n<p>-Dave</p>","timeToRead":7,"frontmatter":{"title":"Is moving to TypeScript in 2019 hard?","date":"November 11, 2019","description":"I explore whether moving to TypeScript in 2019 is hard to do"}}},"pageContext":{"slug":"/is-moving-to-typescript-hard/","previous":{"fields":{"slug":"/typescript-3-7/"},"frontmatter":{"title":"Cool TypeScript 3.7 things"}},"next":{"fields":{"slug":"/a-nice-express-testing-experience/"},"frontmatter":{"title":"A nice Express testing experience"}}}}}