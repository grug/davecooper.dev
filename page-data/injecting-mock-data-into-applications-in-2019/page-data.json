{"componentChunkName":"component---src-templates-blog-post-js","path":"/injecting-mock-data-into-applications-in-2019/","result":{"data":{"site":{"siteMetadata":{"title":"davecooper.dev"}},"markdownRemark":{"id":"3bc078c1-2732-51db-b1d5-4be4962ae51c","excerpt":"Imagine this timeline… it’s 2019 and injecting mock data into web applications sucks. Keeping application state to be deterministic and flexible is incredibly…","html":"<p>Imagine this timeline… it’s 2019 and injecting mock data into web applications sucks. Keeping application state to be deterministic and flexible is incredibly difficult and cumbersome.</p>\n<p><em>Oh wait</em>, this is the timeline we live in 😱</p>\n<p>Let’s take a look at that in the most shameless abrasive way possible - with me shilling a library I wrote!</p>\n<h2>How do we currently get data into our applications for development?</h2>\n<p>Some of the things that I’m sure we’ve all tried when trying to mash data into our applications:</p>\n<p><strong>Connect the application to production services</strong></p>\n<p><em>No. Just don’t.</em></p>\n<p>If you do this, the developer police will come and take you to developer jail 🚓</p>\n<p>In developer jail, you have to talk about <em>“which IDE is the best”</em> and <em>Tabs vs. Spaces</em> all day, every day. You don’t want that and neither do I.</p>\n<p>This only leads to problems. You’ll accidentally mutate something on one (or all) of your users and everyone will be sad. Plus, you’ll be in jail.</p>\n<p><strong>Connect the application to a UAT/Staging services</strong></p>\n<p><em>No.</em></p>\n<p>If you do this, the developer police will also come and take you to developer jail 🚓</p>\n<p>Inevitably, you’ll end up having many people connecting to these services and user data will be mutated in weird ways that make it difficult to test new features or reprocuce bugs. As with the above scenario, everyone will be sad (and in jail - which will probably make you more sad).</p>\n<p><strong>Connect the application to a local copy of your services</strong></p>\n<p>This is the first approach that won’t land you in developer jail.</p>\n<p>However, it’s a pain to do <em>well</em> - and if you don’t do it well, you’ll go straight to <em>you-know-where</em>.</p>\n<p>You don’t want to have to set your services up manually, so now you’ll probably need to containerise (how do you even spell that word?) things and have ways to reliably reproduce your data stores from scratch and then when things change with your application architecture and implementation etc… you’re probably going to have to do a lot of extra work to keep up with that.</p>\n<blockquote>\n<p>Dave, all of these solutions suck so far. What else can I do?</p>\n</blockquote>\n<p>Yes, yes they do. Let’s continue…</p>\n<p><strong>Run a local mock service to expose data</strong></p>\n<p>Okay, we’re getting somewhere.</p>\n<p>We could write a really simple service (Node/Express servers are easy to set up and is generally familiar to frontend developers) to expose the endpoints and data that our application has. Writing a simple Node service isn’t that hard and it doesn’t put us in a spot where we can be touching actual customer data, nor are we going to be at risk of modifying something that someone else is relying on, since it’s our own personal environment.</p>\n<p>The downside here, though, is that we now have quite a lot of code to write and maintain when all we really care about is the data that comes back in response to our requests. We also still don’t have easy ways of specifically and reliably testing happy/unhappy paths in our applications.</p>\n<hr>\n<blockquote>\n<p>Dave, what about something off-the-shelf?</p>\n</blockquote>\n<p>There are <em>loads and loads and loads and loads and loads and loads (and loads)</em> of solutions available to achieve exactly what we’re talking about (did I mention there are loads of them?). Let’s just look at a couple to see what they’re like.</p>\n<p><em>disclaimer: I don’t want it to sound like I’m trash-talking anything that someone has put time and effort to develop. I’m merely pointing out the underlying problems with data injection that I see in web application development today.</em></p>\n<h2>json-server</h2>\n<p><a href=\"https://github.com/typicode/json-server\">json-server</a> is a simple solution that allows you to specify a JSON file describing the endpoints of your application, and provides a HTTP interface to that. Boom 💥. Zero coding and easy to set up. It also has about a billion Github ⭐️’s so obviously it’s doing a lot of things right.</p>\n<p>Here’s what a sample config looks like (shamelessly lifted from its Github page):</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"posts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"json-server\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"typicode\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"comments\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"body\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"some comment\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"postId\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"profile\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"typicode\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Super easy to write. Super easy to understand. I’ll let you guess what is returned when you make a <code class=\"language-text\">GET</code> to <code class=\"language-text\">/comments</code> (<em>spoiler: you’re correct</em>).</p>\n<p>There are some downsides to this:</p>\n<ul>\n<li>\n<p><em>What if I have a tonne of endpoints in my application?</em></p>\n<ul>\n<li>This file becomes quite large</li>\n</ul>\n</li>\n<li><em>How do I easily test happy/unhappy paths?</em> (i.e. how do I test that my <code class=\"language-text\">POST</code> to <code class=\"language-text\">/login</code> has failed?)</li>\n<li>\n<p><em>How can I simulate delay into individual responses?</em></p>\n<ul>\n<li>There is a <code class=\"language-text\">--delay</code> flag you can pass into the process, but the delay is applied to all responses</li>\n</ul>\n</li>\n<li>Writing lots of JSON is a pain. You get little auto-complete and no typings on anything.</li>\n</ul>\n<h2>apimocker</h2>\n<p>I wanted to give some code examples for <a href=\"https://github.com/gstroup/apimocker\">apimocker</a> but to come up with a self-contained example that demonstrates basic usage is a bit lengthy, so I’ll leave that up to you to check out on its Github page. Essentially, it’s a beefier version of <code class=\"language-text\">json-server</code>.</p>\n<p><code class=\"language-text\">apimocker</code> allows for things like:</p>\n<ul>\n<li>Switch-responses based on URL parameters (this is a term I like to refer to as <code class=\"language-text\">scenarios</code> - remember this for later)</li>\n<li>Splitting of responses into files</li>\n<li>Global response delay, or endpoint-specific response delay</li>\n</ul>\n<p>This is all very cool 😎, except that these config files become very large, very quickly and can be quite hard to read. For example, to configure more advanced switch-responses (<code class=\"language-text\">scenarios</code> - keep remembering this term!) you need to know <code class=\"language-text\">JSON path</code>, which is like <code class=\"language-text\">XPath</code>, only more annoying (okay, that’s subjective).</p>\n<hr>\n<p>These solutions are still a bit heavy and a bit cumbersome, <em>in my opinion</em>. In these cases, we’re spining up a new process and having that constantly run. My dev laptop is a fairly new Macbook, but it still sounds like it’s about to launch into orbit any time I look at it.</p>\n<p>Wouldn’t it just be nice to have some way of not writing these messy, sometimes complicated configs and save on machine resources?</p>\n<p>Hmmm 🤔</p>\n<h2>Enter data-mocks</h2>\n<p>Here’s the part where I shamelessly plug a library I’ve written. I bet you’ve been looking forward to this!</p>\n<p>I co-authored a library called <a href=\"https://github.com/ovotech/data-mocks\">data-mocks</a>. It’s very rad - but of course I’d say that…</p>\n<p>Here’s a brief overview of what it is/does:</p>\n<ul>\n<li>Uses a code driven config to define endpoints we want to mock, and their respective responses</li>\n<li>\n<p>Similar to <a href=\"https://github.com/nabil-boag/angular-multimocks\">angular-multimocks</a>, but <em>framework agnostic</em></p>\n<ul>\n<li>This means it’ll work with plain <code class=\"language-text\">JS</code>, <code class=\"language-text\">Angular</code>, <code class=\"language-text\">React</code>, <code class=\"language-text\">React Native</code> etc…</li>\n<li>This library was actually the inspiration for writing <code class=\"language-text\">data-mocks</code></li>\n</ul>\n</li>\n<li>Compatible with <code class=\"language-text\">XHR</code> and <code class=\"language-text\">Fetch</code></li>\n<li>Light and easy to set up</li>\n<li><code class=\"language-text\">Scenario</code> (he said that term again!) support</li>\n</ul>\n<p>Under the hood, <code class=\"language-text\">data-mocks</code> intercepts HTTP requests your application makes, based on a regex performed against the URL that is being requested. No actual HTTP requests get made as they are picked up by <a href=\"https://github.com/wheresrhys/fetch-mock\">fetch-mock</a> for Fetch requests and <a href=\"https://github.com/jameslnewell/xhr-mock\">xhr-mock</a> for XHR requests. The authors of those two libraries are the real MVPs here and deserve massive amounts of respect 🏆</p>\n<p>Let’s look at a basic React app that makes a request to an API:</p>\n<p><strong>App.jsx</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SomeComponent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./SomeComponent'</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SomeComponent</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>SomeComponent.jsx</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    thing<span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'www.davesapi.com/get-my-thing'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">thing</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> thing <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Dave's cool thing</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Here's a thing: {!this.state.thing ? 'Loading...' : this.state.thing}\n        </span><span class=\"token punctuation\">{</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>thing <span class=\"token operator\">===</span> <span class=\"token string\">'badThing'</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">OH NO, THAT IS A BAD THING!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When the component loads, we hit our server and we display our <code class=\"language-text\">thing</code> once it comes back.</p>\n<p>Neato burrito 🌯</p>\n<p>But what if something bad (i.e. <code class=\"language-text\">badThing</code>) comes back from the API? 🤔</p>\n<p>We could:</p>\n<ul>\n<li>\n<p>Hardcode our server to respond with <code class=\"language-text\">badThing</code>? ❌</p>\n<ul>\n<li>That would suck and is way too manual</li>\n</ul>\n</li>\n<li>\n<p>Hardcode the response in our component? ❌</p>\n<ul>\n<li>That would also suck and is also way too manual</li>\n</ul>\n</li>\n<li>Use <code class=\"language-text\">data-mocks</code>? ✅</li>\n</ul>\n<p>Introducing data-mocks into an application is very simple.</p>\n<p>All a mock is, is the following:</p>\n<ul>\n<li>A URL matcher, which is just a regex on the endpoint name</li>\n<li>A HTTP method</li>\n<li>A response object</li>\n<li>A response code</li>\n<li>A delay, in milliseconds</li>\n</ul>\n<p>That’s it. Five things to describe literally any mock. No JSON config. No having to learn a massive API or read a massive readme (although there is one available…).</p>\n<p>All we need to do is call the <code class=\"language-text\">injectMocks</code> function exposed by <code class=\"language-text\">data-mocks</code> and pass in a list of mocks we want to use. Very neat.</p>\n<p><strong>App.jsx</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SomeComponent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./SomeComponent'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> injectMocks <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'data-mocks'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> mocks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      url<span class=\"token operator\">:</span> <span class=\"token regex\">/get-my-thing/</span><span class=\"token punctuation\">,</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n      response<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> thing<span class=\"token operator\">:</span> <span class=\"token string\">'this is a thing'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      responseCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n      delay<span class=\"token operator\">:</span> <span class=\"token number\">250</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">injectMocks</span><span class=\"token punctuation\">(</span>mocks<span class=\"token punctuation\">,</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// This sets the default scenario</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SomeComponent</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Sick - we’re good to go. We can now run our app locally and we get the same behaviour as we did when we were connecting to the actual service.</p>\n<p>But I promised you better than that - I promised you an easy way to test other paths of use in the app.</p>\n<h2>Scenarios</h2>\n<p>We can now talk about them! 🕺💃</p>\n<blockquote>\n<p>A scenario is just a mapping of responses that is given a name (i.e. the scenario you are running). The <code class=\"language-text\">default</code> scenario is the default set of behaviour exhibited by endpoints in the application. Any non-default scenario will give you the full set of default mocks, plus all mocks defined in the scenario. If a mock has the same URL matcher in the specified scenario, it will override the response in the corresponding default mock.</p>\n</blockquote>\n<p>In simpler terms:</p>\n<blockquote>\n<p>A scenario is a set of API responses you want your application to give in a given scenario (yes, we’ve used the term to define the term).</p>\n</blockquote>\n<p>Let’s see what this looks like:</p>\n<p><strong>App.jsx</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> SomeComponent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./SomeComponent'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> injectMocks<span class=\"token punctuation\">,</span> extractScenarioFromLocation <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'data-mocks'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> mocks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      url<span class=\"token operator\">:</span> <span class=\"token regex\">/get-my-thing/</span><span class=\"token punctuation\">,</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n      response<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> thing<span class=\"token operator\">:</span> <span class=\"token string\">'thisIsAThing'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      responseCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n      delay<span class=\"token operator\">:</span> <span class=\"token number\">250</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  badThing<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      url<span class=\"token operator\">:</span> <span class=\"token regex\">/get-my-thing/</span><span class=\"token punctuation\">,</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n      response<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> thing<span class=\"token operator\">:</span> <span class=\"token string\">'badThing'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      responseCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n      delay<span class=\"token operator\">:</span> <span class=\"token number\">250</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">injectMocks</span><span class=\"token punctuation\">(</span>mocks<span class=\"token punctuation\">,</span> <span class=\"token function\">extractScenarioFromLocation</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SomeComponent</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You’re probably getting the idea here. However, two things will probably stick out:</p>\n<ul>\n<li><em>“When I run this, I still get the default scenario respone. What gives?”</em></li>\n<li><em>“What is this <code class=\"language-text\">extractScenarioFromLocation(window.location)</code> business?”</em></li>\n</ul>\n<p>To answer both at once: we need to specify which scenario to run. The way we do this is through the <em>URL of the page we’re on</em>. Go on, add <code class=\"language-text\">?scenario=badThing</code> to your query string (i.e. <code class=\"language-text\">localhost:8080?scenario=badThing</code>). If you have another way that you’d like to pass in the scenario name to the <code class=\"language-text\">injectMocks</code> function, feel free to not use the <code class=\"language-text\">extractScenarioFromLocation</code> util function.</p>\n<p>You’ll now see that we get the unhappy path response from our mocks.</p>\n<p><em>This is especially helpful when running things like Cypress tests - as we don’t need to change anything at all in our code to test different behaviours and make assertions based on what comes back from our APIs!</em></p>\n<h2>Other considerations</h2>\n<p>There are a couple of things to keep in mind with this approach that will make life nice and easy for you:</p>\n<ul>\n<li>\n<p>You can avoid having mocks bundled into your application by surrounding the call to <code class=\"language-text\">injectMocks</code> with a <code class=\"language-text\">if (process.env === &#39;development&#39;) { injectMocks(...); }</code> block.</p>\n<ul>\n<li>Alternatively you can define a separate entry point into your application (i.e. <code class=\"language-text\">App.dev.jsx</code>) and point your dev build to there. This is a bit more work, though.</li>\n</ul>\n</li>\n<li>You can move your mock definitions into their own section of the project (i.e. <code class=\"language-text\">/mocks</code>) to avoid clutter in the entry point of your application</li>\n</ul>\n<h2>Summary of what this allows us to do</h2>\n<p>With all of the above, we can now:</p>\n<ul>\n<li>Easily integrate new mocks into the application</li>\n<li>\n<p>Easily toggle between our new best friend, scenarios</p>\n<ul>\n<li>This allows us to test feature/bug fixes when developing <strong>and</strong> in automated UI tests. This is the killer feature of <code class=\"language-text\">data-mocks</code>, in my opinion. Nothing else seems to offer something as easy (in terms of configuring and using the feature)</li>\n</ul>\n</li>\n<li>Write frontend code without having to have a single line of backend code (or a mock API server) written</li>\n<li>Not have to write <em>yet another</em> JSON config</li>\n</ul>\n<p><em>There you go, now we’re data-mock’ing!</em></p>\n<p>If you’ve got any questions about this or want to contribute, please ping me or open a PR/Github issue 😊</p>\n<p>-Dave</p>","timeToRead":10,"frontmatter":{"title":"Injecting mock data into applications in 2019","date":"April 30, 2019","description":"Why is injecting mocked data into applications in 2019 so difficult? Let's find out."}}},"pageContext":{"slug":"/injecting-mock-data-into-applications-in-2019/","previous":{"fields":{"slug":"/an-unlikely-memory-leak/"},"frontmatter":{"title":"Unlikely Memory Leak"}},"next":{"fields":{"slug":"/speaking-at-angular-connect/"},"frontmatter":{"title":"Speaking at AngularConnect 2019"}}}}}